version: '3.9'

services:
  # Redis 缓存服务配置
  dns-checker-cache:
    image: redis:latest  # 使用最新版本的 Redis
    networks:
      - main  # 连接到名为 main 的网络
    deploy:
      mode: replicated  # 使用复制模式
      replicas: 1  # 设置副本数量为 1
      placement:
        constraints:  # 限制服务运行在特定节点上
          - "node.labels.${TONCENTER_ENV}.dns-checker==true"

  dns-checker:
    image: localhost:5000/ton-dns-checker:${TONCENTER_ENV}  # 指定镜像和标签
    build:
      context: .  # Docker 构建上下文目录
      dockerfile: Dockerfile  # Dockerfile 路径
      args:  # 构建参数
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_API_KEY: ${REACT_APP_API_KEY}
    command: -c "uvicorn dnschecker.main:app --host 0.0.0.0 --port 8081"  # 启动命令
    ports:
      - "8081:8081"  # 映射容器端口 8081 到主机的端口 8081
    networks:
      - main  # 连接到名为 main 的网络
    secrets:  # 使用 Docker secret
      - global-config
    deploy:
      mode: replicated  # 使用复制模式
      replicas: 1  # 设置副本数量为 1
      placement:
        constraints:  # 限制服务运行在特定节点上
          - "node.labels.${TONCENTER_ENV}.dns-checker==true"
    healthcheck:  # 健康检查配置
      test: ["CMD", "curl", "-f", "http://localhost:8081/healthcheck"]
      interval: 5s  # 检查间隔
      timeout: 10s  # 超时时间
      retries: 5  # 重试次数
      start_period: 40s  # 启动周期
  
  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    networks:
      - main

# 网络配置
networks:
  main:
    attachable: true  # 允许手动连接
    external: false   # 非外部网络

# Docker secret 配置
secrets:
  global-config:
    file: ${TON_LITESERVER_CONFIG:-private/mainnet.json}  # 文件路径，支持环境变量
